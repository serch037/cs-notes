<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Computer Science Notes</title><link href="/" rel="alternate"></link><link href="/feeds/parcial_1.atom.xml" rel="self"></link><id>/</id><updated>2015-02-08T00:00:00-06:00</updated><entry><title>Algorithm Tracing</title><link href="/algorithm-tracing.html" rel="alternate"></link><updated>2015-02-08T00:00:00-06:00</updated><author><name>Sergio Ugalde Marcano</name></author><id>tag:,2015-02-08:algorithm-tracing.html</id><summary type="html">&lt;h3 id="definition"&gt;Definition&lt;/h3&gt;
&lt;p&gt;This refers to a step-by-step analysis of what a computational calculation performs. By making it explicit what is executed in the program and how the variables included are affected in each execution&amp;nbsp;cycle. &lt;/p&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;p&gt;The following example, coded in &lt;a href="/c-programming-basics.html"&gt;C&lt;/a&gt;, illustrates the tracing of reversing the contents on an &lt;a href="/one-dimensional-arrays.html"&gt;Array&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="tracing"&gt;Tracing:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;General Information:&lt;ul&gt;
&lt;li&gt;Times the loop runs:&amp;nbsp;3&lt;/li&gt;
&lt;li&gt;Variables &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; their purpose: &lt;em&gt;size&lt;/em&gt;: Self-explanatory; &lt;em&gt;temp&lt;/em&gt;: Aids in swap operation; &lt;em&gt;x&lt;/em&gt;: For loop&amp;nbsp;counter. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State of the variables at end of each&amp;nbsp;loop:&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x Variable&lt;/th&gt;
&lt;th&gt;temp Variable&lt;/th&gt;
&lt;th&gt;my_array[] Contents&lt;/th&gt;
&lt;th&gt;index Variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0;&lt;/td&gt;
&lt;td&gt;1;&lt;/td&gt;
&lt;td&gt;6,2,3,4,5,1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1;&lt;/td&gt;
&lt;td&gt;2;&lt;/td&gt;
&lt;td&gt;6,5,3,4,2,1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2;&lt;/td&gt;
&lt;td&gt;3;&lt;/td&gt;
&lt;td&gt;6,5,4,3,2,1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Final &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; initial state of the&amp;nbsp;array:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;becomes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Algorithms"></category><category term="Fourth_Semester"></category></entry><entry><title>C Programming Basics</title><link href="/c-programming-basics.html" rel="alternate"></link><updated>2015-02-08T00:00:00-06:00</updated><author><name>Sergio Ugalde Marcano</name></author><id>tag:,2015-02-08:c-programming-basics.html</id><summary type="html">&lt;p&gt;C is a low-level programming languages, it concedes programmers greater capabilities and generally produces faster code, as it has less overhead to the processor. However, it has weaker error checking, as it trusts in the capabilities of the programmers to make well written code, and gives them the responsiility to do&amp;nbsp;so.  &lt;/p&gt;
&lt;h3 id="usage-basics"&gt;Usage&amp;nbsp;basics&lt;/h3&gt;
&lt;p&gt;As C is a compiled language (as opposed to scripting ones, such as Python, which are usually run via a virtual machine), it needs to be processed from source code to machine before it may be executed. For simple projects, this is done only by compiling, but substeps include linking, preprocessing, etc. which may be explored further&amp;nbsp;on. &lt;/p&gt;
&lt;p&gt;For achieving this task, several compilers have been written, which follow the C standard as definied by a comittee of several developers &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; contributors. However, the most important ones as of the moment are &lt;span class="caps"&gt;GCC&lt;/span&gt; or &lt;span class="caps"&gt;LLVM&lt;/span&gt;/Clang, the first of which is the one being used currently by the&amp;nbsp;author.&lt;/p&gt;</summary><category term="C"></category><category term="Fourth_Semester"></category></entry><entry><title>One Dimensional Arrays</title><link href="/one-dimensional-arrays.html" rel="alternate"></link><updated>2015-02-08T00:00:00-06:00</updated><author><name>Sergio Ugalde Marcano</name></author><id>tag:,2015-02-08:one-dimensional-arrays.html</id><summary type="html">&lt;h3 id="definition"&gt;Definition&lt;/h3&gt;
&lt;p&gt;Arrays are a type of &lt;strong&gt;data structure&lt;/strong&gt; that store information in a collection, using for retrieval or storage &lt;em&gt;keys&lt;/em&gt; or &lt;em&gt;indexes&lt;/em&gt; which is an integer value that begins from 0 and goes on until N-1, where N is the number of elements in the array. One dimensional arrays consist of a linear sequence of data stored contiguously in&amp;nbsp;memory. &lt;/p&gt;
&lt;h3 id="essential-operations"&gt;Essential&amp;nbsp;operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Statement &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Assignment&lt;/li&gt;
&lt;li&gt;Swapping&lt;ul&gt;
&lt;li&gt;Requires an additional&amp;nbsp;variable&lt;/li&gt;
&lt;li&gt;Three stepped&amp;nbsp;process&lt;/li&gt;
&lt;li&gt;Used in many different&amp;nbsp;algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cirular shifting&lt;ul&gt;
&lt;li&gt;Displacing the array by n&amp;nbsp;places&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reversing&lt;/li&gt;
&lt;li&gt;Bubble sorting&lt;ul&gt;
&lt;li&gt;The simplest sorting algorithm compares adjacent values until all values satisfy the specified&amp;nbsp;conditions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="c-like-syntax"&gt;C-like&amp;nbsp;Syntax&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//Declaration and statement&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;an_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;THE_SIZE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SOME_VARIABLES&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="additional-resources"&gt;Additional&amp;nbsp;Resources&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html"&gt;Variable Sized Arrays in&amp;nbsp;C&lt;/a&gt;&lt;/p&gt;</summary><category term="Arrays"></category><category term="Fourth_Semester"></category></entry><entry><title>Subroutines and Functions</title><link href="/subroutines-and-functions.html" rel="alternate"></link><updated>2015-02-08T00:00:00-06:00</updated><author><name>Sergio Ugalde Marcano</name></author><id>tag:,2015-02-08:subroutines-and-functions.html</id><summary type="html">&lt;h3 id="definition"&gt;Definition&lt;/h3&gt;
&lt;p&gt;A function is a very useful programming concept, as it relates to the modular nature of problem solving in the computer sciences. It may be stated as a &lt;em&gt;subprogram&lt;/em&gt; which inside the &lt;em&gt;main&lt;/em&gt; statements, processes information. On a basic level, it saves programmers its time by preventing them from repeating the same lines of code for similar or even identical tasks. As a matter of fact, most programming languages include a core library (which is a collection of functions) so programmers are not required to write code for the most common tasks, such as getting the size of an array, or printing a&amp;nbsp;value.  &lt;/p&gt;
&lt;p&gt;Some functions yield a result of the process they carry out, this process is known as &lt;em&gt;returning&lt;/em&gt; a value if they do not return any value, they may be known as void&amp;nbsp;functions.&lt;/p&gt;
&lt;p&gt;Note: Functions are known by distinct names in different programming languages, the most common alternatives are methods, subroutines, both of which are essentially the&amp;nbsp;same. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use them for repetitive tasks possibly implementing a&amp;nbsp;library.&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id="c-like-syntax"&gt;C-like&amp;nbsp;syntax&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// In languages such as C, the standard is to declare functions&lt;/span&gt;
&lt;span class="c1"&gt;// before using them. This is called function prototyping.&lt;/span&gt;
&lt;span class="c1"&gt;// Example: &lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;aFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_parameters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="c1"&gt;//more code&lt;/span&gt;

&lt;span class="n"&gt;Calling&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;The_parameters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Declaration&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;aFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_parameters&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="c1"&gt;//Data processing&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Functions"></category><category term="Fourth_Semester"></category></entry><entry><title>Two Dimensional Arrays</title><link href="/two-dimensional-arrays.html" rel="alternate"></link><updated>2015-02-08T00:00:00-06:00</updated><author><name>Sergio Ugalde Marcano</name></author><id>tag:,2015-02-08:two-dimensional-arrays.html</id><summary type="html">&lt;h3 id="definition"&gt;Definition&lt;/h3&gt;
&lt;p&gt;In a fundamental way, two dimensional arrays are rather similar two one dimentional arrays, as the processor treats it as an &lt;em&gt;extended&lt;/em&gt; one dimensional array. For the user, however, the net effect is effectively different. Two dimensional arrays are best represented, by a two dimensional matrix of information. However, the notion of an array of arrays is also valid, and, as a matter of fact, useful for grasping the concept of its syntax and&amp;nbsp;declaration. &lt;/p&gt;
&lt;h3 id="essential-operations"&gt;Essential&amp;nbsp;operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Declaration and&amp;nbsp;assignment&lt;/li&gt;
&lt;li&gt;Looping &lt;ul&gt;
&lt;li&gt;Requires two indexes and&amp;nbsp;loops&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vertical and/or horizontal&amp;nbsp;rotation&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="c-like-syntax"&gt;C-like&amp;nbsp;syntax&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Declaration&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;an_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// When used as function argument, its size must be given first.&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;an_arrayFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sizex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sizey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;anrray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sizey&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;sizex&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="additional-resources"&gt;Additional&amp;nbsp;resources&lt;/h3&gt;
&lt;h4 id="graphics"&gt;Graphics&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.mat.univie.ac.at/~kriegl/Skripten/CG/node25.html"&gt;Midpoing line algorithm&lt;/a&gt;
&lt;a href="http://www.asksatyam.com/2011/01/midpoint-circle-algorithm.html"&gt;Midpoint cirle&amp;nbsp;algorithm&lt;/a&gt;&lt;/p&gt;</summary><category term="Arrays"></category><category term="Fourth_Semester"></category></entry></feed>