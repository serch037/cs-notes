<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Computer Science Notes</title><link href="/" rel="alternate"></link><link href="/feeds/parcial_2.atom.xml" rel="self"></link><id>/</id><updated>2015-03-21T00:00:00-06:00</updated><entry><title>Recursion</title><link href="/recursion.html" rel="alternate"></link><updated>2015-03-21T00:00:00-06:00</updated><author><name>Sergio Ugalde Marcano</name></author><id>tag:,2015-03-21:recursion.html</id><summary type="html">&lt;h2 id="definition"&gt;Definition&lt;/h2&gt;
&lt;div style="text-align: center"&gt;
   &lt;img src=" http://www.pxleyes.com/blog/wp-content/uploads/2010/06/escher-hands.png" alt="Your alt text" title="Title"/&gt;

&lt;/div&gt;

&lt;p&gt;Recursion may be thought of as a programming paradigm that considers functions which call themselves in order to process information.  Its complimentary paradigm is&amp;nbsp;iteration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; Recursion requires the declaration of a &lt;em&gt;limit case&lt;/em&gt;, which determines where the recursive process should stop and return control to a head or main function, otherwise the recursive  method will descend until memory is&amp;nbsp;exhausted.&lt;/p&gt;
&lt;h2 id="advantages-disadvantages"&gt;Advantages &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Disadvantages&lt;/h2&gt;
&lt;p&gt;Pros:
* Resulting code may be cleaner, smaller, more elegant and better illustrate what the code&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;Cons: 
&lt;em&gt; Function calls tend to be computationally expensive in most programming languages. 
&lt;/em&gt; If not coded using techniques such as tail-recursion, execution can easily result in a stack&amp;nbsp;overflow. &lt;/p&gt;
&lt;h2 id="tail-recursion"&gt;Tail&amp;nbsp;Recursion&lt;/h2&gt;
&lt;p&gt;Tail recusrion  possible implementation of recursive functions, in which the recursive call is executed in the end, this means that the result of the last recursive call, is the result of the function itself. This allows the compiler to optimize the code by not saving, and duplicating the stack in each recursive call. An important aspect of tail recursive functions is that they may be directly implemented as iterative functions, unlike non-tail recursive ones. A tail recursive function, usually takes an additional argument, and in order to simplify code, implements and additional helper&amp;nbsp;function. &lt;/p&gt;
&lt;p&gt;A graphic tracing of the algorithm reveals the advantages of tail recursion over non-tail recursive methods.
&lt;div style="text-align: center"&gt;
   &lt;img src=" http://t1.gstatic.com/images?q=tbn:ANd9GcSHuIW396JU13EzPx5qULmiq5pqPnlw90KWD0VW7EKZuLM5lFn5" alt="Your alt text" title="Title"/&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;de facto&lt;/em&gt; example of a recursive function is the factorial one. Here, we will exemplify two possible of implementation of recursion in factorial. Before looking at the solution try to implement it on pseudocode&amp;nbsp;yourself. &lt;/p&gt;
&lt;p&gt;Simple&amp;nbsp;solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Base Case: &lt;/span&gt;
    &lt;span class="c1"&gt;//    If n &amp;lt;= 1 then n! = 1.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Recursive Case:  &lt;/span&gt;
    &lt;span class="c1"&gt;//    If n &amp;gt; 1 then n! = n * (n-1)!&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tail recursive&amp;nbsp;solution: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;factorial_i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;factorial_i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;currentNumber&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentNumber&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factorial_i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentNumber&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;currentNumber&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the trace of the second implementation would result in much lower memory used in the stack as the n value gets progressively higher, also note how tail recursion implements an additional function &amp;#8212;often called helper&amp;nbsp;function&amp;#8212;  &lt;/p&gt;
&lt;h2 id="excercises"&gt;Excercises&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Develop a function that prints the contents of an array, and if possible, implment tail-recursion or some other&amp;nbsp;optimization. &lt;/li&gt;
&lt;li&gt;Find the lowest and highest values of an&amp;nbsp;array. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="additional-resources"&gt;Additional&amp;nbsp;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://learnyouahaskell.com/recursion"&gt;Recursion &amp;#8212; Haskell reference&lt;/a&gt;
&lt;a href="http://pages.cs.wisc.edu/~vernon/cs367/notes/6.RECURSION.html"&gt;Recursion Notes&lt;/a&gt;
&lt;a href="http://danzig.jct.ac.il/java_class/recursion.html"&gt;Recursion in Java&lt;/a&gt;
&lt;a href="http://users.dickinson.edu/~braught/courses/cs132f01/classes/code/Factorial.src.html"&gt;Factorial using tail&amp;nbsp;recursion&lt;/a&gt;&lt;/p&gt;</summary><category term="Fourth_Semester"></category></entry><entry><title>Queues</title><link href="/queues.html" rel="alternate"></link><updated>2015-03-20T00:00:00-06:00</updated><author><name>Sergio Ugalde Marcano</name></author><id>tag:,2015-03-20:queues.html</id><summary type="html">&lt;h2 id="definition"&gt;Definition&lt;/h2&gt;
&lt;p&gt;A queue is a container of objects &amp;#8212;otherwise known as a data structure&amp;#8212;, that stores elements in such a way that new elements are added to the back, and the ones to be processed are chosen from the bottom. 
&lt;div style="text-align: center"&gt;
   &lt;img src=" http://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Queue_algorithmn.jpg/400px-Queue_algorithmn.jpg" alt="Your alt text" title="Title"/&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The basic queue operations are enqueue() and dequeue(), this respecively insert and delete elements from what is known as the rear, and front of the queue. This parts are analogous to the stack’s top and&amp;nbsp;bottom. &lt;/p&gt;
&lt;h2 id="differences-from-stacks"&gt;Differences from&amp;nbsp;Stacks&lt;/h2&gt;
&lt;p&gt;An important difference from the stack data structure to be considered, is the way both handle removal of items. Within a queue, the process is not as simple as only declaring certain item as able to be overwritten, as this would lead to a scenario in which space in the queue is simply inaccessible and wasted. Therefore two alternatives are possible: 
    1. To displace each element of the array 
    2. To implement the queue using a &lt;em&gt;circular array&lt;/em&gt;
While the first solution is more straight forward, it is also severely inefficient, so (2) would be much more appropriate, even though the implementation is not as&amp;nbsp;simple. &lt;/p&gt;
&lt;div style="text-align: center"&gt;
   &lt;img src="http://www.codeproject.com/KB/threads/LockFree/circular_queue___conceptual-view.jpg" alt="Your alt text" title="Title"/&gt;

&lt;/div&gt;

&lt;h3 id="exercise"&gt;Exercise&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Develop the basic queue operations using a circular&amp;nbsp;array.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;enQ&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;[]){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;
  &lt;span class="c1"&gt;//Calculate new top&lt;/span&gt;
  &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)%&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;++;&lt;/span&gt;
  &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//System.out.println(Arrays.toString(QUEUE));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;deQ&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;[]){&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;
  &lt;span class="c1"&gt;//Calculate new bottom&lt;/span&gt;
  &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Count: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; Top: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; Bottom: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//System.out.println(Arrays.toString(QUEUE));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2 Develop a peek() function that returns the element in the front of the queue without removing&amp;nbsp;it. &lt;/p&gt;
&lt;h2 id="possible-applications"&gt;Possible&amp;nbsp;Applications&lt;/h2&gt;
&lt;p&gt;Queues are often implemented within an operating system for determining the priority of certain instructions, this is known as &lt;em&gt;scheduling&lt;/em&gt;, and is useful both for &lt;span class="caps"&gt;CPU&lt;/span&gt; time allocation, as well as I/O&amp;nbsp;resources. &lt;/p&gt;
&lt;h2 id="additional-resources"&gt;Additional&amp;nbsp;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cs.cmu.edu/~adamchik/15-121/lectures/Stacks%20and%20Queues/Stacks%20and%20Queues.html"&gt;Stacks and&amp;nbsp;Queues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cprogramming.com/tutorial/computersciencetheory/queue.html"&gt;Implementation in&amp;nbsp;C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Fourth_Semester"></category></entry><entry><title>3D Graphics</title><link href="/3d-graphics.html" rel="alternate"></link><updated>2015-03-19T00:00:00-06:00</updated><author><name>Sergio Ugalde Marcano</name></author><id>tag:,2015-03-19:3d-graphics.html</id><summary type="html">&lt;h2 id="definition"&gt;Definition&lt;/h2&gt;
&lt;p&gt;This topic refers to the techniques used to represent images using algorithmically in a computer for several purposes, such as animation, data visualization, etc. It includes both the processing and the representation of two-dimentional and three-dimensional&amp;nbsp;graphics. &lt;/p&gt;
&lt;h2 id="mathematical-topics"&gt;Mathematical&amp;nbsp;topics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Geometry&lt;/li&gt;
&lt;li&gt;Vectors&lt;/li&gt;
&lt;li&gt;Matrixes&lt;/li&gt;
&lt;li&gt;Etc. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3d-models"&gt;3D&amp;nbsp;Models&lt;/h2&gt;
&lt;p&gt;As previously established, computers require certain abstractions for representing graphics. The most basic one, is the use of triangles in intersecting surfaces. This triangles are described using a series of vertexes. The process by which a 3D object is converted into a model suitable for graphical representation in a computer is called modeling. As the numbers of such base figure increases, the resolution of the image increases as well, but so does the expensiveness of the calculations&amp;nbsp;involved. &lt;/p&gt;
&lt;div style="text-align: center"&gt;
   &lt;img src="http://xoo.me/template/7820/p16laf9eb4otd6etedj1fki1qhh9-thumb.jpg " alt="Your alt text" title="Title"/&gt;
&lt;/div&gt;

&lt;p&gt;Therefore, most 3d objects may be represented combining some basic figures, this are known as &lt;em&gt;primitives&lt;/em&gt;, in processing the primitives are called as follows: 
&lt;em&gt; box(int size);
&lt;/em&gt; sphere(int&amp;nbsp;radius);&lt;/p&gt;
&lt;p&gt;More complex models, may be defined using the beginShape(), vertex(x,y,z), and endShape() functions. Refer to the processing documentation for further&amp;nbsp;information. &lt;/p&gt;
&lt;h2 id="transformations"&gt;Transformations&lt;/h2&gt;
&lt;p&gt;Once modeled, objects may be rotated, scaled or translated (displaced). This procedures are applied in what is known as a &lt;em&gt;transformation matrix&lt;/em&gt;, which is the medium that represents the space in which the object is&amp;nbsp;placed. &lt;/p&gt;
&lt;div style="text-align: center"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vQ60rFwh2ig" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id="basic-animation"&gt;Basic&amp;nbsp;Animation&lt;/h2&gt;
&lt;p&gt;Animation may be considered as a series of sequential animations applied to a graphical object, so in order to transmit the illusion of movement, an object may be translated several times, following small steps and a determined path. Scale and rotation may be used to create other effects. The most important aspect, is that the object should be redrawn in each frame with a slight difference, so that when the transformation is applied throughout the frames, an effect of animation takes&amp;nbsp;place.  &lt;/p&gt;
&lt;h2 id="lights-materials-textures"&gt;Lights, Materials,&amp;nbsp;Textures&lt;/h2&gt;
&lt;p&gt;Another aspect of 3D graphics, is the consideration of lightning. This has a qualitative impact on the nature of the scene to be rendered, and is closely related to other topics, such as materials and textures. Lightning helps to illustrate the relative distance between a model and a lightning source. Then, a texture refers to how the model should be filled so that it does not appear as a monochromatic mesh. A material may be simulated in the way an object reflects light and, when related to its texture, gives a more realistic effect, therefore, a “metallic” model, may reflect light differently than a “plastical” model, this may be accomplished by a combinations of the shininess() and specularity() methods in processing, among other&amp;nbsp;techniques.&lt;/p&gt;
&lt;div style="text-align: center"&gt;
   &lt;img src="http://graphics.cs.yale.edu/site/sites/files/images/Aging Materials_teaser.png" alt="Your alt text" title="Title"/&gt;
&lt;/div&gt;

&lt;h2 id="tools"&gt;Tools&lt;/h2&gt;
&lt;p&gt;According to the abstraction level &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; the optimization requirement different tools are available for programmers. Some of them&amp;nbsp;include: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenGl&lt;/li&gt;
&lt;li&gt;DirectX&lt;/li&gt;
&lt;li&gt;Processing (which is the one to be used during this&amp;nbsp;course)&lt;/li&gt;
&lt;li&gt;Unity&lt;/li&gt;
&lt;li&gt;Blender&lt;/li&gt;
&lt;li&gt;Unreal&amp;nbsp;Engine&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="additional-resources"&gt;Additional&amp;nbsp;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://processing.org/tutorials/transform2d/"&gt;Processing&amp;nbsp;Transformations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/foundations-computer-graphics-uc-berkeleyx-cs184-1x"&gt;Computer Graphics&amp;nbsp;course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Graphics series with John Chapman:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://youtu.be/KdyvizaygyY"&gt;Universe of&amp;nbsp;Triangles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://youtu.be/vQ60rFwh2ig"&gt;Power of the&amp;nbsp;Matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://youtu.be/aweqeMxDnu4"&gt;Triangles to&amp;nbsp;Pixels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://youtu.be/OODzTMcGDD0"&gt;Visibility&amp;nbsp;Problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Fourth_Semester"></category></entry><entry><title>Stacks</title><link href="/stacks.html" rel="alternate"></link><updated>2015-03-18T00:00:00-06:00</updated><author><name>Sergio Ugalde Marcano</name></author><id>tag:,2015-03-18:stacks.html</id><summary type="html">&lt;h2 id="definition"&gt;Definition&lt;/h2&gt;
&lt;p&gt;Within computer science, stacks are one of the most important data structures, which just means that they are containers of objects and organize them in a certain way, following some basic principles.  The stack has a &lt;em&gt;top&lt;/em&gt;, and a &lt;em&gt;bottom&lt;/em&gt;, this, respectively, refer to the  last element added to the list and the point in which elements can no longer be removed from the stack. A stack must have a limited size which should be declared at the time of creation, so that as more elements are added, the system may know when the stack is full and therefore, is able to prevent what is known as a stack&amp;nbsp;overflow.  &lt;/p&gt;
&lt;p&gt;The basic operations that may be applied to a stack are called &lt;strong&gt;push&lt;/strong&gt; and &lt;strong&gt;pop&lt;/strong&gt;. This are some &lt;span class="caps"&gt;CS&lt;/span&gt;-specific way, which may be interpreted respectively as insert, and&amp;nbsp;remove. &lt;/p&gt;
&lt;p&gt;A stack may be represented using an array in the following&amp;nbsp;fashion:&lt;/p&gt;
&lt;div style="text-align: center"&gt;
   &lt;img src=" http://www.cs.cmu.edu/~adamchik/15-121/lectures/Stacks%20and%20Queues/pix/array_stack.bmp" alt="Your alt text" title="Title"/&gt;

&lt;/div&gt;

&lt;h2 id="possible-applications"&gt;Possible&amp;nbsp;Applications&lt;/h2&gt;
&lt;p&gt;Stacks are used by computers in order to assign memory and resources to procedures and instructions, so several languages and compilers implement this kind of structure.  These are some classical examples of when the most recent elements are the one that need to be accessed and&amp;nbsp;processed. &lt;/p&gt;
&lt;h3 id="excercises"&gt;Excercises&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Code in java the basic stack operations. Make sure to check for stack overflow and&amp;nbsp;underflow. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;[]){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;stack_top&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;stack_size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="c1"&gt;//println(&amp;quot;TEN&amp;quot;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;stack_top&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_top&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;[]){&lt;/span&gt; &lt;span class="c1"&gt;//Returns -1 if empty&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_top&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;stack_bottom&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Stop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_top&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack_top&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;stack_top&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Develop a function that takes an array representing a stack, and an integer n, and creates a resized version of the stack of n&amp;nbsp;elements. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="additional-resources"&gt;Additional&amp;nbsp;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;http://www.cs.cmu.edu/~adamchik/15-121/lectures/Stacks%20and%20Queues/Stacks%20and%20Queues.html&lt;/li&gt;
&lt;li&gt;http://www.cprogramming.com/tutorial/computersciencetheory/stack.html&lt;/li&gt;
&lt;li&gt;www.cs.umd.edu/class/sum2003/cmsc311/Notes/Mips/stack.html&lt;/li&gt;
&lt;li&gt;algs4.cs.princeton.edu/13stacks/&lt;/li&gt;
&lt;li&gt;http://www.algolist.net/Data_structures/Stack/Array-based_implementation&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Fourth_Semester"></category></entry></feed>